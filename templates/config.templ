package templates

import "pipeliner/pkg/tools"
import "strconv"

templ CurrentConfig(pipelineConfigs []tools.ChainConfig) {
	@Base("Configurations") {
		<div class="container mx-auto p-6">
			<!-- Page Header -->
			<div class="mb-8">
				<h1 class="text-3xl font-bold text-gray-900 mb-2">Available Scan Configurations</h1>
				<p class="text-gray-600">Choose from pre-built pipeline configurations for your security scanning needs</p>
			</div>
			if len(pipelineConfigs) == 0 {
				<div class="text-center py-16">
					<div class="text-gray-500">
						<svg class="mx-auto h-16 w-16 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
						</svg>
						<h3 class="text-xl font-medium text-gray-900 mb-2">No configurations found</h3>
						<p class="text-gray-500">Get started by adding configuration files to the config directory.</p>
					</div>
				</div>
			} else {
				<!-- Configuration Grid -->
				<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" id="config-grid">
					for i, config := range pipelineConfigs {
						<div class="bg-white rounded-lg shadow-md hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1 cursor-pointer group">
							<div class="p-6">
								<!-- Config Header -->
								<div class="flex items-start justify-between mb-4">
									<div class="flex-1">
										<h3 class="text-lg font-semibold text-gray-900 group-hover:text-blue-600 transition-colors">
											{ config.Description }
										</h3>
									</div>
									<div class="ml-2">
										<svg class="w-5 h-5 text-gray-400 group-hover:text-blue-500 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
										</svg>
									</div>
								</div>
								<!-- Config Stats -->
								<div class="flex items-center space-x-4 mb-4 text-sm text-gray-600">
									<div class="flex items-center">
										<svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
										</svg>
										<span class="capitalize">{ config.ExecutionMode }</span>
									</div>
									<div class="flex items-center">
										<svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19.428 15.428a2 2 0 00-1.022-.547l-2.387-.477a6 6 0 00-3.86.517l-.318.158a6 6 0 01-3.86.517L6.05 15.21a2 2 0 00-1.806.547M8 4h8l-1 1v5.172a2 2 0 00.586 1.414l5 5c1.26 1.26.367 3.414-1.415 3.414H4.828c-1.78 0-2.678-2.153-1.415-3.414l5-5A2 2 0 009 9.172V5L8 4z"></path>
										</svg>
										<span>{ strconv.Itoa(len(config.Tools)) } tools</span>
									</div>
								</div>
								<!-- Tool Preview -->
								<div class="mb-4">
									<p class="text-sm text-gray-500 mb-2">Includes tools:</p>
									<div class="flex flex-wrap gap-1">
										for j, tool := range config.Tools {
											if j < 3 {
												<span class="inline-flex items-center px-2 py-1 rounded-md text-xs font-medium bg-blue-100 text-blue-800">
													{ tool.Name }
												</span>
											}
										}
										if len(config.Tools) > 3 {
											<span class="inline-flex items-center px-2 py-1 rounded-md text-xs font-medium bg-gray-100 text-gray-600">
												+{ strconv.Itoa(len(config.Tools) - 3) } more
											</span>
										}
									</div>
								</div>
								<!-- Action Buttons -->
								<div class="flex space-x-2">
									<button
										class="flex-1 px-3 py-2 text-sm font-medium text-blue-600 bg-blue-50 rounded-md hover:bg-blue-100 transition-colors"
										data-config-index={ strconv.Itoa(i) }
										onclick="showConfigDetails(this.dataset.configIndex)"
									>
										View Details
									</button>
									<button class="flex-1 px-3 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 transition-colors">
										Run Scan
									</button>
								</div>
							</div>
						</div>
						<!-- Hidden Details Panel for this specific config -->
						<div id={ "config-details-" + strconv.Itoa(i) } class="hidden">
							@ConfigDetails(config)
						</div>
					}
				</div>
			}
			<!-- Details Panel where the selected config details will be shown -->
			<div id="config-details" class="mt-8">
				<!-- Content will be shown here when a config is selected -->
			</div>
		</div>
		<script type="text/javascript">
            function showConfigDetails(configIndex) {
                // Hide all config details first
                const allDetails = document.querySelectorAll('[id^="config-details-"]');
                allDetails.forEach(detail => detail.classList.add('hidden'));
                
                // Clear the main details panel first
                const mainDetailsPanel = document.getElementById('config-details');
                mainDetailsPanel.innerHTML = '';
                
                // Get the specific config details
                const selectedDetails = document.getElementById('config-details-' + configIndex);
                if (selectedDetails) {
                    // Clone the content and show it in the main panel
                    mainDetailsPanel.innerHTML = selectedDetails.innerHTML;
                    
                    // Scroll to the details panel
                    mainDetailsPanel.scrollIntoView({ behavior: 'smooth' });
                }
            }
        </script>
	}
}

templ ConfigDetails(config tools.ChainConfig) {
	<div class="bg-white rounded-lg shadow-lg">
		<div class="border-b border-gray-200 px-6 py-4">
			<h2 class="text-xl font-bold text-gray-900">Configuration Details</h2>
			<p class="text-gray-600 mt-1">{ config.Description }</p>
		</div>
		<div class="p-6">
			<div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
				<div class="bg-gray-50 p-4 rounded-lg">
					<h3 class="font-medium text-gray-900">Execution Mode</h3>
					<p class="text-gray-600 capitalize">{ config.ExecutionMode }</p>
				</div>
				<div class="bg-gray-50 p-4 rounded-lg">
					<h3 class="font-medium text-gray-900">Total Tools</h3>
					<p class="text-gray-600">{ strconv.Itoa(len(config.Tools)) } configured tools</p>
				</div>
			</div>
			<h3 class="text-lg font-medium text-gray-900 mb-4">Tools Configuration</h3>
			<div class="space-y-4">
				for _, tool := range config.Tools {
					<div class="border border-gray-200 rounded-lg p-4">
						<div class="flex items-start justify-between mb-3">
							<div>
								<h4 class="font-medium text-gray-900">{ tool.Name }</h4>
								<p class="text-sm text-gray-600">{ tool.Description }</p>
							</div>
							if tool.Type != "" {
								<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
									{ tool.Type }
								</span>
							}
						</div>
						<div class="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
							if tool.Command != "" {
								<div>
									<span class="font-medium text-gray-700">Command:</span>
									<code class="ml-1 px-2 py-1 bg-gray-100 rounded text-gray-800">{ tool.Command }</code>
								</div>
							}
							if len(tool.DependsOn) > 0 {
								<div>
									<span class="font-medium text-gray-700">Depends on:</span>
									<span class="ml-1 text-gray-600">
										for i, dep := range tool.DependsOn {
											if i > 0 {
												, 
											}
											{ dep }
										}
									</span>
								</div>
							}
							if tool.Timeout > 0 {
								<div>
									<span class="font-medium text-gray-700">Timeout:</span>
									<span class="ml-1 text-gray-600">{ tool.Timeout }s</span>
								</div>
							}
							if tool.Replace != "" {
								<div>
									<span class="font-medium text-gray-700">Replace pattern:</span>
									<code class="ml-1 px-2 py-1 bg-gray-100 rounded text-gray-800">{ tool.Replace }</code>
								</div>
							}
						</div>
						if len(tool.Flags) > 0 {
							<div class="mt-3">
								<span class="font-medium text-gray-700">Flags:</span>
								<div class="mt-1 space-y-1">
									for _, flag := range tool.Flags {
										<div class="flex items-center space-x-2 text-sm">
											<code class="px-2 py-1 bg-gray-100 rounded text-gray-800">{ flag.Flag }</code>
											if flag.Default != "" {
												<span class="text-gray-500">default: { flag.Default }</span>
											}
											if flag.Required {
												<span class="text-red-600 text-xs">required</span>
											}
										</div>
									}
								</div>
							</div>
						}
						if len(tool.PostHooks) > 0 {
							<div class="mt-3">
								<span class="font-medium text-gray-700">Post Hooks:</span>
								<div class="flex flex-wrap gap-1 mt-1">
									for _, hook := range tool.PostHooks {
										<span class="inline-flex items-center px-2 py-1 rounded-md text-xs font-medium bg-green-100 text-green-800">
											{ hook }
										</span>
									}
								</div>
							</div>
						}
					</div>
				}
			</div>
			<div class="mt-6 flex space-x-3">
				<button class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
					<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1m4 0h1m-6 4h1m4 0h1m-6 4h1m4 0h1M4 7h16M4 11h16M4 15h16M4 19h16"></path>
					</svg>
					Run Configuration
				</button>
				<button class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
					<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
					</svg>
					Edit Configuration
				</button>
			</div>
		</div>
	</div>
}
